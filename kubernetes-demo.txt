Setup GKE Nodes - make sure you select ip alias

Installed kubectl via snap: sudo snap install kubectl --classic

# Create environment variable for correct distribution
export CLOUD_SDK_REPO="cloud-sdk-$(lsb_release -c -s)"

# Add the Cloud SDK distribution URI as a package source
echo "deb http://packages.cloud.google.com/apt $CLOUD_SDK_REPO main" | sudo tee -a /etc/apt/sources.list.d/google-cloud-sdk.list

# Import the Google Cloud Platform public key
curl https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -

# Update the package list and install the Cloud SDK
sudo apt-get update && sudo apt-get install google-cloud-sdk

# Setup gcloud
gcloud init

ajmaidak@qclug-demo-1:~$ gcloud container clusters get-credentials qclug --zone us-central1-a --project qclug-demo
Fetching cluster endpoint and auth data.
kubeconfig entry generated for qclug.

ajmaidak@qclug-demo-1:~$ kubectl cluster-info
Kubernetes master is running at https://35.225.232.151
GLBCDefaultBackend is running at https://35.225.232.151/api/v1/namespaces/kube-system/services/default-http-backend:http/proxy
Heapster is running at https://35.225.232.151/api/v1/namespaces/kube-system/services/heapster/proxy
KubeDNS is running at https://35.225.232.151/api/v1/namespaces/kube-system/services/kube-dns:dns/proxy
Metrics-server is running at https://35.225.232.151/api/v1/namespaces/kube-system/services/https:metrics-server:/proxy


Now we have kubernetes!

clone Kubernetes Up and Running Examples:

git clone https://github.com/kubernetes-up-and-running/examples.git

Kubernetes up and runnin has an example application called kuard you can run it locally in docker with:

$ docker run --expose 8080 --publish 8080:8080 gcr.io/kuar-demo/kuard-amd64:1

 * Point out hostname etc

Now to run it with kuberntes:

$ kubectl apply -f 5-1-kuard-pod.yaml

$ kubectl get pods -o wide
NAME    READY   STATUS    RESTARTS   AGE   IP         NODE                             NOMINATED NODE
kuard   1/1     Running   0          19h   10.4.1.3   gke-qclug-pool-1-7be5df3b-dkz8   <none>

ssh ajmaidak@5-1-kuard-pod.yaml

since we are running VPC native this works with a POD, I don't have to expose a service:

ajmaidak@qclug-demo-1:~$ ping 10.4.1.3
PING 10.4.1.3 (10.4.1.3) 56(84) bytes of data.
64 bytes from 10.4.1.3: icmp_seq=1 ttl=63 time=1.72 ms
64 bytes from 10.4.1.3: icmp_seq=2 ttl=63 time=0.649 ms

ajmaidak@qclug-demo-1:~$ curl 10.4.1.3:8080
<!doctype html>

You can describe the pod with:

$ kubectl describe pod kuard

You can access network services on the Pod with kubectl port-forward:

$ kubectl port-forward kuard 8080:8080

visit: http://127.0.0.1:8080

you can see logs with

$ kubectl logs kuard

Playing with ReplicaSets and Services

kubectl run alpaca-prod \
--image=gcr.io/kuar-demo/kuard-amd64:1 \
--replicas=3 \
--port=8080 \
--labels="ver=1,app=alpaca,env=prod"
$ kubectl expose deployment alpaca-prod
$ kubectl run bandicoot-prod \
--image=gcr.io/kuar-demo/kuard-amd64:2 \
--replicas=2 \
--port=8080 \
--labels="ver=2,app=bandicoot,env=prod"
$ kubectl expose deployment bandicoot-prod
$ kubectl get services -o wide


ALPACA_POD=$(kubectl get pods -l app=alpaca \
-o jsonpath='{.items[0].metadata.name}')
$ kubectl port-forward $ALPACA_POD 48858:8080

kubectl get endpoints alpaca-prod --watch

kubectl edit service alpaca-prod

Change spec.type to NodePort

ajmaidak@qclug-demo-1:~$ kubectl describe service alpaca-prod
Name:                     alpaca-prod
Namespace:                default
Labels:                   app=alpaca
                          env=prod
                          ver=1
Annotations:              <none>
Selector:                 app=alpaca,env=prod,ver=1
Type:                     NodePort
IP:                       10.8.2.208
Port:                     <unset>  8080/TCP
TargetPort:               8080/TCP
NodePort:                 <unset>  30977/TCP                         <<<<<<<
Endpoints:                10.4.0.9:8080,10.4.1.4:8080,10.4.2.4:8080
Session Affinity:         None
External Traffic Policy:  Cluster
Events:                   <none>

ssh to any gke node and curl localhost:30977 should yield the KUAR page
